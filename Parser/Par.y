-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Parser.Par
  ( happyError
  , myLexer
  , pBlock1
  ) where

import Prelude

import qualified Parser.Abs
import Parser.Lex

}

%name pBlock1_internal Block1
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'        { PT _ (TS _ 1)  }
  '!='       { PT _ (TS _ 2)  }
  '$'        { PT _ (TS _ 3)  }
  '%'        { PT _ (TS _ 4)  }
  '&'        { PT _ (TS _ 5)  }
  '&&'       { PT _ (TS _ 6)  }
  '&='       { PT _ (TS _ 7)  }
  '('        { PT _ (TS _ 8)  }
  ')'        { PT _ (TS _ 9)  }
  '*'        { PT _ (TS _ 10) }
  '**'       { PT _ (TS _ 11) }
  '*='       { PT _ (TS _ 12) }
  '+'        { PT _ (TS _ 13) }
  '++'       { PT _ (TS _ 14) }
  '+='       { PT _ (TS _ 15) }
  ','        { PT _ (TS _ 16) }
  '-'        { PT _ (TS _ 17) }
  '--'       { PT _ (TS _ 18) }
  '-='       { PT _ (TS _ 19) }
  '/'        { PT _ (TS _ 20) }
  '/='       { PT _ (TS _ 21) }
  ':'        { PT _ (TS _ 22) }
  ':='       { PT _ (TS _ 23) }
  ';'        { PT _ (TS _ 24) }
  '<'        { PT _ (TS _ 25) }
  '<='       { PT _ (TS _ 26) }
  '=='       { PT _ (TS _ 27) }
  '>'        { PT _ (TS _ 28) }
  '>='       { PT _ (TS _ 29) }
  '?'        { PT _ (TS _ 30) }
  '@'        { PT _ (TS _ 31) }
  'False'    { PT _ (TS _ 32) }
  'True'     { PT _ (TS _ 33) }
  '['        { PT _ (TS _ 34) }
  ']'        { PT _ (TS _ 35) }
  '^='       { PT _ (TS _ 36) }
  'bool'     { PT _ (TS _ 37) }
  'break'    { PT _ (TS _ 38) }
  'catch'    { PT _ (TS _ 39) }
  'char'     { PT _ (TS _ 40) }
  'checked'  { PT _ (TS _ 41) }
  'continue' { PT _ (TS _ 42) }
  'def'      { PT _ (TS _ 43) }
  'do'       { PT _ (TS _ 44) }
  'else'     { PT _ (TS _ 45) }
  'float'    { PT _ (TS _ 46) }
  'for'      { PT _ (TS _ 47) }
  'if'       { PT _ (TS _ 48) }
  'in'       { PT _ (TS _ 49) }
  'int'      { PT _ (TS _ 50) }
  'ref'      { PT _ (TS _ 51) }
  'res'      { PT _ (TS _ 52) }
  'return'   { PT _ (TS _ 53) }
  'string'   { PT _ (TS _ 54) }
  'throw'    { PT _ (TS _ 55) }
  'try'      { PT _ (TS _ 56) }
  'val'      { PT _ (TS _ 57) }
  'valres'   { PT _ (TS _ 58) }
  'var'      { PT _ (TS _ 59) }
  'void'     { PT _ (TS _ 60) }
  'while'    { PT _ (TS _ 61) }
  '{'        { PT _ (TS _ 62) }
  '|='       { PT _ (TS _ 63) }
  '||'       { PT _ (TS _ 64) }
  '}'        { PT _ (TS _ 65) }
  L_Ident    { PT _ (TV _)    }
  L_charac   { PT _ (TC _)    }
  L_doubl    { PT _ (TD _)    }
  L_integ    { PT _ (TI _)    }
  L_quoted   { PT _ (TL _)    }

%%

Ident :: { (Parser.Abs.BNFC'Position, Parser.Abs.Ident) }
Ident  : L_Ident { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Ident (tokenText $1)) }

Char    :: { (Parser.Abs.BNFC'Position, Char) }
Char     : L_charac { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Char) }

Double  :: { (Parser.Abs.BNFC'Position, Double) }
Double   : L_doubl  { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Double) }

Integer :: { (Parser.Abs.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

String  :: { (Parser.Abs.BNFC'Position, String) }
String   : L_quoted { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), ((\(PT _ (TL s)) -> s) $1)) }

Block :: { (Parser.Abs.BNFC'Position, Parser.Abs.Block) }
Block
  : '{' Block1 '}' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), (snd $2)) }

Block1 :: { (Parser.Abs.BNFC'Position, Parser.Abs.Block) }
Block1
  : ListInstruction { (fst $1, Parser.Abs.Blck (fst $1) (snd $1)) }

Instruction :: { (Parser.Abs.BNFC'Position, Parser.Abs.Instruction) }
Instruction
  : Statement { (fst $1, Parser.Abs.Stmt (fst $1) (snd $1)) }
  | Declaration { (fst $1, Parser.Abs.Decl (fst $1) (snd $1)) }

ListInstruction :: { (Parser.Abs.BNFC'Position, [Parser.Abs.Instruction]) }
ListInstruction
  : {- empty -} { (Parser.Abs.BNFC'NoPosition, []) }
  | Instruction { (fst $1, (:[]) (snd $1)) }
  | Instruction ';' ListInstruction { (fst $1, (:) (snd $1) (snd $3)) }

Declaration :: { (Parser.Abs.BNFC'Position, Parser.Abs.Declaration) }
Declaration
  : 'def' Ident ':=' Expr { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.ConstDecl (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'var' Ident ':' Type ':=' Expr { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.VarDecl (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6)) }
  | 'def' Ident '(' ListParameter ')' ':' Type Block { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.FunDecl (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $7) (snd $8)) }

ListParameter :: { (Parser.Abs.BNFC'Position, [Parser.Abs.Parameter]) }
ListParameter
  : {- empty -} { (Parser.Abs.BNFC'NoPosition, []) }
  | Parameter { (fst $1, (:[]) (snd $1)) }
  | Parameter ',' ListParameter { (fst $1, (:) (snd $1) (snd $3)) }

Parameter :: { (Parser.Abs.BNFC'Position, Parser.Abs.Parameter) }
Parameter
  : Modality Ident ':' Type { (fst $1, Parser.Abs.Param (fst $2) (snd $1) (snd $2) (snd $4)) } -- modificata la posizione di Parser.Abs.Param in fst $2 invece di fst $1

Modality :: { (Parser.Abs.BNFC'Position, Parser.Abs.Modality) }
Modality
  : {- empty -} { (Parser.Abs.BNFC'NoPosition, Parser.Abs.Modality1 Parser.Abs.BNFC'NoPosition) }
  | 'val' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Modality_val (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'ref' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Modality_ref (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'valres' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Modality_valres (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'res' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Modality_res (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }

Type :: { (Parser.Abs.BNFC'Position, Parser.Abs.Type) }
Type
  : BasicType { (fst $1, Parser.Abs.BsType (fst $1) (snd $1)) }
  | '[' Expr ']' Type { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.ArrayType (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'checked' '[' Expr ']' Type { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.CArrType (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | '[' ']' Type { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.UnsizedArrayType (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $3)) }
  | 'checked' '[' ']' Type { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.UnsizedCArrayType (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $4)) }
  | '@' Type { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Pointer (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

BasicType :: { (Parser.Abs.BNFC'Position, Parser.Abs.BasicType) }
BasicType
  : 'bool' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.BasicType_bool (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'char' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.BasicType_char (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'int' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.BasicType_int (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'string' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.BasicType_string (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'float' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.BasicType_float (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'void' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.BasicType_void (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }

Statement :: { (Parser.Abs.BNFC'Position, Parser.Abs.Statement) }
Statement
  : Block { (fst $1, Parser.Abs.Compound (fst $1) (snd $1)) }
  | JumpStatement { (fst $1, Parser.Abs.Jump (fst $1) (snd $1)) }
  | IterStatement { (fst $1, Parser.Abs.Iter (fst $1) (snd $1)) }
  | BranchStatement { (fst $1, Parser.Abs.Branch (fst $1) (snd $1)) }
  | Expr Assignment_op Expr { (fst $1, Parser.Abs.Assign (fst $1) (snd $1) (snd $2) (snd $3)) }
  | 'try' Block 'catch' Block { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.TryStmt (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'throw' String { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Throw (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Expr { (fst $1, Parser.Abs.StmntExpr (fst $1) (snd $1)) }

Assignment_op :: { (Parser.Abs.BNFC'Position, Parser.Abs.Assignment_op) }
Assignment_op
  : ':=' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.AssignOp (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | '*=' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.AssignMul (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | '+=' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.AssignAdd (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | '/=' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.AssignDiv (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | '-=' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.AssignSub (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | '^=' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.AssignPow (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | '&=' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.AssignAnd (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | '|=' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.AssignOr (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }

JumpStatement :: { (Parser.Abs.BNFC'Position, Parser.Abs.JumpStatement) }
JumpStatement
  : 'break' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Break (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'continue' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Continue (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'return' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.RetExpVoid (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'return' Expr { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.RetExp (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

BranchStatement :: { (Parser.Abs.BNFC'Position, Parser.Abs.BranchStatement) }
BranchStatement
  : 'if' '(' Expr ')' Block { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.If (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | 'if' '(' Expr ')' Block 'else' Block { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.IfElse (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5) (snd $7)) }

IterStatement :: { (Parser.Abs.BNFC'Position, Parser.Abs.IterStatement) }
IterStatement
  : 'while' '(' Expr ')' Block { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.While (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | 'do' Block 'while' '(' Expr ')' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.DoWhile (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $5)) }
  | 'for' Ident 'in' Expr ',' Expr ',' Expr Block { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.For (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6) (snd $8) (snd $9)) }

Expr :: { (Parser.Abs.BNFC'Position, Parser.Abs.Expr) }
Expr
  : '(' Expr ')' '?' Expr ':' Expr { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.IfExpr (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $5) (snd $7)) }
  | Expr '||' Expr1 { (fst $1, Parser.Abs.Or (fst $1) (snd $1) (snd $3)) }
  | Expr1 { (fst $1, (snd $1)) }

Expr1 :: { (Parser.Abs.BNFC'Position, Parser.Abs.Expr) }
Expr1
  : Expr1 '&&' Expr2 { (fst $1, Parser.Abs.And (fst $1) (snd $1) (snd $3)) }
  | Expr2 { (fst $1, (snd $1)) }

Expr2 :: { (Parser.Abs.BNFC'Position, Parser.Abs.Expr) }
Expr2
  : '!' Expr3 { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Not (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Expr3 { (fst $1, (snd $1)) }

Expr3 :: { (Parser.Abs.BNFC'Position, Parser.Abs.Expr) }
Expr3
  : Expr4 '==' Expr4 { (fst $1, Parser.Abs.Eq (fst $1) (snd $1) (snd $3)) }
  | Expr4 '!=' Expr4 { (fst $1, Parser.Abs.Neq (fst $1) (snd $1) (snd $3)) }
  | Expr4 '<' Expr4 { (fst $1, Parser.Abs.Lt (fst $1) (snd $1) (snd $3)) }
  | Expr4 '<=' Expr4 { (fst $1, Parser.Abs.LtE (fst $1) (snd $1) (snd $3)) }
  | Expr4 '>' Expr4 { (fst $1, Parser.Abs.Gt (fst $1) (snd $1) (snd $3)) }
  | Expr4 '>=' Expr4 { (fst $1, Parser.Abs.GtE (fst $1) (snd $1) (snd $3)) }
  | Expr4 { (fst $1, (snd $1)) }

Expr4 :: { (Parser.Abs.BNFC'Position, Parser.Abs.Expr) }
Expr4
  : Expr4 '+' Expr5 { (fst $1, Parser.Abs.Add (fst $1) (snd $1) (snd $3)) }
  | Expr4 '-' Expr5 { (fst $1, Parser.Abs.Sub (fst $1) (snd $1) (snd $3)) }
  | Expr5 { (fst $1, (snd $1)) }

Expr5 :: { (Parser.Abs.BNFC'Position, Parser.Abs.Expr) }
Expr5
  : Expr5 '*' Expr6 { (fst $1, Parser.Abs.Mul (fst $1) (snd $1) (snd $3)) }
  | Expr5 '/' Expr6 { (fst $1, Parser.Abs.Div (fst $1) (snd $1) (snd $3)) }
  | Expr5 '%' Expr6 { (fst $1, Parser.Abs.Mod (fst $1) (snd $1) (snd $3)) }
  | Expr6 { (fst $1, (snd $1)) }

Expr6 :: { (Parser.Abs.BNFC'Position, Parser.Abs.Expr) }
Expr6
  : Expr7 '**' Expr6 { (fst $1, Parser.Abs.Pow (fst $1) (snd $1) (snd $3)) }
  | Expr7 { (fst $1, (snd $1)) }

Expr7 :: { (Parser.Abs.BNFC'Position, Parser.Abs.Expr) }
Expr7
  : '-' Expr8 { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Neg (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Expr8 { (fst $1, (snd $1)) }

Expr8 :: { (Parser.Abs.BNFC'Position, Parser.Abs.Expr) }
Expr8
  : '++' Expr9 { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.PreInc (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '--' Expr9 { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.PreDecr (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Expr9 '++' { (fst $1, Parser.Abs.PostInc (fst $1) (snd $1)) }
  | Expr9 '--' { (fst $1, Parser.Abs.PostDecr (fst $1) (snd $1)) }
  | Expr9 { (fst $1, (snd $1)) }

Expr9 :: { (Parser.Abs.BNFC'Position, Parser.Abs.Expr) }
Expr9
  : '&' Expr9 { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Ref (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '$' Expr9 { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Deref (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Expr9 '[' Expr ']' { (fst $1, Parser.Abs.ArrayAcc (fst $1) (snd $1) (snd $3)) }
  | Expr10 { (fst $1, (snd $1)) }

Expr10 :: { (Parser.Abs.BNFC'Position, Parser.Abs.Expr) }
Expr10
  : Ident { (fst $1, Parser.Abs.Id (fst $1) (snd $1)) }
  | Ident '(' ListExpr ')' { (fst $1, Parser.Abs.FunCall (fst $1) (snd $1) (snd $3)) }
  | Expr11 { (fst $1, (snd $1)) }

ListExpr :: { (Parser.Abs.BNFC'Position, [Parser.Abs.Expr]) }
ListExpr
  : {- empty -} { (Parser.Abs.BNFC'NoPosition, []) }
  | Expr { (fst $1, (:[]) (snd $1)) }
  | Expr ',' ListExpr { (fst $1, (:) (snd $1) (snd $3)) }

Expr11 :: { (Parser.Abs.BNFC'Position, Parser.Abs.Expr) }
Expr11
  : Integer { (fst $1, Parser.Abs.Int (fst $1) (snd $1)) }
  | Char { (fst $1, Parser.Abs.Char (fst $1) (snd $1)) }
  | String { (fst $1, Parser.Abs.String (fst $1) (snd $1)) }
  | Double { (fst $1, Parser.Abs.Float (fst $1) (snd $1)) }
  | Boolean { (fst $1, Parser.Abs.Bool (fst $1) (snd $1)) }
  | Expr12 { (fst $1, (snd $1)) }

Boolean :: { (Parser.Abs.BNFC'Position, Parser.Abs.Boolean) }
Boolean
  : 'True' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Boolean_True (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'False' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Boolean_False (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1))) }

Expr12 :: { (Parser.Abs.BNFC'Position, Parser.Abs.Expr) }
Expr12
  : '[' ListExpr4 ']' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), Parser.Abs.Array (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '(' Expr ')' { (uncurry Parser.Abs.BNFC'Position (tokenLineCol $1), (snd $2)) }

ListExpr4 :: { (Parser.Abs.BNFC'Position, [Parser.Abs.Expr]) }
ListExpr4
  : Expr4 { (fst $1, (:[]) (snd $1)) }
  | Expr4 ',' ListExpr4 { (fst $1, (:) (snd $1) (snd $3)) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pBlock1 :: [Token] -> Err Parser.Abs.Block
pBlock1 = fmap snd . pBlock1_internal
}

