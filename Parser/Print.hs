-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Parser.

module Parser.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Parser.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Parser.Abs.Ident where
  prt _ (Parser.Abs.Ident i) = doc $ showString i
instance Print (Parser.Abs.Block' a) where
  prt i = \case
    Parser.Abs.Blck _ instructions -> prPrec i 1 (concatD [prt 0 instructions])

instance Print (Parser.Abs.Instruction' a) where
  prt i = \case
    Parser.Abs.Stmt _ statement -> prPrec i 0 (concatD [prt 0 statement])
    Parser.Abs.Decl _ declaration -> prPrec i 0 (concatD [prt 0 declaration])

instance Print [Parser.Abs.Instruction' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print (Parser.Abs.Declaration' a) where
  prt i = \case
    Parser.Abs.ConstDecl _ id_ expr -> prPrec i 0 (concatD [doc (showString "def"), prt 0 id_, doc (showString ":="), prt 0 expr])
    Parser.Abs.VarDecl _ id_ type_ expr -> prPrec i 0 (concatD [doc (showString "var"), prt 0 id_, doc (showString ":"), prt 0 type_, doc (showString ":="), prt 0 expr])
    Parser.Abs.FunDecl _ id_ parameters type_ block -> prPrec i 0 (concatD [doc (showString "def"), prt 0 id_, doc (showString "("), prt 0 parameters, doc (showString ")"), doc (showString ":"), prt 0 type_, prt 0 block])

instance Print [Parser.Abs.Parameter' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Parser.Abs.Parameter' a) where
  prt i = \case
    Parser.Abs.Param _ modality id_ type_ -> prPrec i 0 (concatD [prt 0 modality, prt 0 id_, doc (showString ":"), prt 0 type_])

instance Print (Parser.Abs.Modality' a) where
  prt i = \case
    Parser.Abs.Modality1 _ -> prPrec i 0 (concatD [])
    Parser.Abs.Modality_val _ -> prPrec i 0 (concatD [doc (showString "val")])
    Parser.Abs.Modality_ref _ -> prPrec i 0 (concatD [doc (showString "ref")])
    Parser.Abs.Modality_valres _ -> prPrec i 0 (concatD [doc (showString "valres")])
    Parser.Abs.Modality_res _ -> prPrec i 0 (concatD [doc (showString "res")])

instance Print (Parser.Abs.Type' a) where
  prt i = \case
    Parser.Abs.BsType _ basictype -> prPrec i 0 (concatD [prt 0 basictype])
    Parser.Abs.ArrayType _ expr type_ -> prPrec i 0 (concatD [doc (showString "["), prt 0 expr, doc (showString "]"), prt 0 type_])
    Parser.Abs.CArrType _ expr type_ -> prPrec i 0 (concatD [doc (showString "checked"), doc (showString "["), prt 0 expr, doc (showString "]"), prt 0 type_])
    Parser.Abs.UnsizedArrayType _ type_ -> prPrec i 0 (concatD [doc (showString "["), doc (showString "]"), prt 0 type_])
    Parser.Abs.UnsizedCArrayType _ type_ -> prPrec i 0 (concatD [doc (showString "checked"), doc (showString "["), doc (showString "]"), prt 0 type_])
    Parser.Abs.Pointer _ type_ -> prPrec i 0 (concatD [doc (showString "@"), prt 0 type_])

instance Print (Parser.Abs.BasicType' a) where
  prt i = \case
    Parser.Abs.BasicType_bool _ -> prPrec i 0 (concatD [doc (showString "bool")])
    Parser.Abs.BasicType_char _ -> prPrec i 0 (concatD [doc (showString "char")])
    Parser.Abs.BasicType_int _ -> prPrec i 0 (concatD [doc (showString "int")])
    Parser.Abs.BasicType_string _ -> prPrec i 0 (concatD [doc (showString "string")])
    Parser.Abs.BasicType_float _ -> prPrec i 0 (concatD [doc (showString "float")])
    Parser.Abs.BasicType_void _ -> prPrec i 0 (concatD [doc (showString "void")])

instance Print (Parser.Abs.Statement' a) where
  prt i = \case
    Parser.Abs.Compound _ block -> prPrec i 0 (concatD [prt 0 block])
    Parser.Abs.Jump _ jumpstatement -> prPrec i 0 (concatD [prt 0 jumpstatement])
    Parser.Abs.Iter _ iterstatement -> prPrec i 0 (concatD [prt 0 iterstatement])
    Parser.Abs.Branch _ branchstatement -> prPrec i 0 (concatD [prt 0 branchstatement])
    Parser.Abs.Assign _ expr1 assignmentop expr2 -> prPrec i 0 (concatD [prt 0 expr1, prt 0 assignmentop, prt 0 expr2])
    Parser.Abs.TryStmt _ block1 block2 -> prPrec i 0 (concatD [doc (showString "try"), prt 0 block1, doc (showString "catch"), prt 0 block2])
    Parser.Abs.Throw _ str -> prPrec i 0 (concatD [doc (showString "throw"), printString str])
    Parser.Abs.StmntExpr _ expr -> prPrec i 0 (concatD [prt 0 expr])

instance Print (Parser.Abs.Assignment_op' a) where
  prt i = \case
    Parser.Abs.AssignOp _ -> prPrec i 0 (concatD [doc (showString ":=")])
    Parser.Abs.AssignMul _ -> prPrec i 0 (concatD [doc (showString "*=")])
    Parser.Abs.AssignAdd _ -> prPrec i 0 (concatD [doc (showString "+=")])
    Parser.Abs.AssignDiv _ -> prPrec i 0 (concatD [doc (showString "/=")])
    Parser.Abs.AssignSub _ -> prPrec i 0 (concatD [doc (showString "-=")])
    Parser.Abs.AssignPow _ -> prPrec i 0 (concatD [doc (showString "^=")])
    Parser.Abs.AssignAnd _ -> prPrec i 0 (concatD [doc (showString "&=")])
    Parser.Abs.AssignOr _ -> prPrec i 0 (concatD [doc (showString "|=")])

instance Print (Parser.Abs.JumpStatement' a) where
  prt i = \case
    Parser.Abs.Break _ -> prPrec i 0 (concatD [doc (showString "break")])
    Parser.Abs.Continue _ -> prPrec i 0 (concatD [doc (showString "continue")])
    Parser.Abs.RetExpVoid _ -> prPrec i 0 (concatD [doc (showString "return")])
    Parser.Abs.RetExp _ expr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 expr])

instance Print (Parser.Abs.BranchStatement' a) where
  prt i = \case
    Parser.Abs.If _ expr block -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block])
    Parser.Abs.IfElse _ expr block1 block2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block1, doc (showString "else"), prt 0 block2])

instance Print (Parser.Abs.IterStatement' a) where
  prt i = \case
    Parser.Abs.While _ expr block -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block])
    Parser.Abs.DoWhile _ block expr -> prPrec i 0 (concatD [doc (showString "do"), prt 0 block, doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Parser.Abs.For _ id_ expr1 expr2 expr3 block -> prPrec i 0 (concatD [doc (showString "for"), prt 0 id_, doc (showString "in"), prt 0 expr1, doc (showString ","), prt 0 expr2, doc (showString ","), prt 0 expr3, prt 0 block])

instance Print (Parser.Abs.Expr' a) where
  prt i = \case
    Parser.Abs.IfExpr _ expr1 expr2 expr3 -> prPrec i 0 (concatD [doc (showString "("), prt 0 expr1, doc (showString ")"), doc (showString "?"), prt 0 expr2, doc (showString ":"), prt 0 expr3])
    Parser.Abs.Or _ expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, doc (showString "||"), prt 1 expr2])
    Parser.Abs.And _ expr1 expr2 -> prPrec i 1 (concatD [prt 1 expr1, doc (showString "&&"), prt 2 expr2])
    Parser.Abs.Not _ expr -> prPrec i 2 (concatD [doc (showString "!"), prt 3 expr])
    Parser.Abs.Eq _ expr1 expr2 -> prPrec i 3 (concatD [prt 4 expr1, doc (showString "=="), prt 4 expr2])
    Parser.Abs.Neq _ expr1 expr2 -> prPrec i 3 (concatD [prt 4 expr1, doc (showString "!="), prt 4 expr2])
    Parser.Abs.Lt _ expr1 expr2 -> prPrec i 3 (concatD [prt 4 expr1, doc (showString "<"), prt 4 expr2])
    Parser.Abs.LtE _ expr1 expr2 -> prPrec i 3 (concatD [prt 4 expr1, doc (showString "<="), prt 4 expr2])
    Parser.Abs.Gt _ expr1 expr2 -> prPrec i 3 (concatD [prt 4 expr1, doc (showString ">"), prt 4 expr2])
    Parser.Abs.GtE _ expr1 expr2 -> prPrec i 3 (concatD [prt 4 expr1, doc (showString ">="), prt 4 expr2])
    Parser.Abs.Add _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "+"), prt 5 expr2])
    Parser.Abs.Sub _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "-"), prt 5 expr2])
    Parser.Abs.Mul _ expr1 expr2 -> prPrec i 5 (concatD [prt 5 expr1, doc (showString "*"), prt 6 expr2])
    Parser.Abs.Div _ expr1 expr2 -> prPrec i 5 (concatD [prt 5 expr1, doc (showString "/"), prt 6 expr2])
    Parser.Abs.Mod _ expr1 expr2 -> prPrec i 5 (concatD [prt 5 expr1, doc (showString "%"), prt 6 expr2])
    Parser.Abs.Pow _ expr1 expr2 -> prPrec i 6 (concatD [prt 7 expr1, doc (showString "**"), prt 6 expr2])
    Parser.Abs.Neg _ expr -> prPrec i 7 (concatD [doc (showString "-"), prt 8 expr])
    Parser.Abs.PreInc _ expr -> prPrec i 8 (concatD [doc (showString "++"), prt 9 expr])
    Parser.Abs.PreDecr _ expr -> prPrec i 8 (concatD [doc (showString "--"), prt 9 expr])
    Parser.Abs.PostInc _ expr -> prPrec i 8 (concatD [prt 9 expr, doc (showString "++")])
    Parser.Abs.PostDecr _ expr -> prPrec i 8 (concatD [prt 9 expr, doc (showString "--")])
    Parser.Abs.Ref _ expr -> prPrec i 9 (concatD [doc (showString "&"), prt 9 expr])
    Parser.Abs.Deref _ expr -> prPrec i 9 (concatD [doc (showString "$"), prt 9 expr])
    Parser.Abs.ArrayAcc _ expr1 expr2 -> prPrec i 9 (concatD [prt 9 expr1, doc (showString "["), prt 0 expr2, doc (showString "]")])
    Parser.Abs.Id _ id_ -> prPrec i 10 (concatD [prt 0 id_])
    Parser.Abs.FunCall _ id_ exprs -> prPrec i 10 (concatD [prt 0 id_, doc (showString "("), prt 0 exprs, doc (showString ")")])
    Parser.Abs.Int _ n -> prPrec i 11 (concatD [prt 0 n])
    Parser.Abs.Char _ c -> prPrec i 11 (concatD [prt 0 c])
    Parser.Abs.String _ str -> prPrec i 11 (concatD [printString str])
    Parser.Abs.Float _ d -> prPrec i 11 (concatD [prt 0 d])
    Parser.Abs.Bool _ boolean -> prPrec i 11 (concatD [prt 0 boolean])
    Parser.Abs.Array _ exprs -> prPrec i 12 (concatD [doc (showString "["), prt 4 exprs, doc (showString "]")])

instance Print [Parser.Abs.Expr' a] where
  prt 4 [x] = concatD [prt 4 x]
  prt 4 (x:xs) = concatD [prt 4 x, doc (showString ","), prt 4 xs]
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Parser.Abs.Boolean' a) where
  prt i = \case
    Parser.Abs.Boolean_True _ -> prPrec i 0 (concatD [doc (showString "True")])
    Parser.Abs.Boolean_False _ -> prPrec i 0 (concatD [doc (showString "False")])
